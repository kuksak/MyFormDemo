package com.infy.formCreation;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.util.EventObject;

import javax.swing.AbstractCellEditor;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeCellEditor;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreePath;

class CustomRenderer extends AbstractCellEditor implements TreeCellRenderer, TreeCellEditor {

	final JTree tree;

	public CustomRenderer(JTree tree) {
		this.tree = tree;
	}

	public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded,
			boolean leaf, int row, boolean hasFocus) {
		Object nodeObject = ((DefaultMutableTreeNode) value).getUserObject();
		if (nodeObject instanceof JPanel) {
			JPanel panel = (JPanel) nodeObject;
			panel.setPreferredSize(new Dimension(380,50));
			return panel;
		} else {
			return new JLabel(nodeObject.toString());
		}

	}

	public Component getTreeCellEditorComponent(JTree tree, Object value, boolean selected, boolean expanded,
			boolean leaf, int row) {
		return getTreeCellRendererComponent(tree, value, true, expanded, leaf, row, true);
	}

	public boolean isCellEditable(final EventObject event) {
		if (!(event instanceof MouseEvent)) {
			return false;
		}

		final MouseEvent mouseEvent = (MouseEvent) event;
		final TreePath path = tree.getPathForLocation(mouseEvent.getX(), mouseEvent.getY());
		if (path == null) {
			return false;
		}

		Object node = path.getLastPathComponent();
		if (node == null || (!(node instanceof DefaultMutableTreeNode))) {
			return false;
		}

		DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) node;
		Object userObject = treeNode.getUserObject();

		return (userObject instanceof JPanel);
	}

	@Override
	public Object getCellEditorValue() {
		return null;
	}
}
